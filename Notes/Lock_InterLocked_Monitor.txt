//Protecting Shared Resource from concurrent access in multithreading
    public class Program
    {
        static int total = 0;
        public static void Main(string[] args)
        {
            Stopwatch stopWatch = Stopwatch.StartNew();
            Thread t1 = new Thread(Program.AddOneMillion);
            Thread t2 = new Thread(Program.AddOneMillion);
            Thread t3 = new Thread(Program.AddOneMillion);

            t1.Start();
            t2.Start();
            t3.Start();

            t1.Join();
            t2.Join();
            t3.Join();

            Console.WriteLine("Sum = " + total);
            stopWatch.Stop();
            Console.WriteLine("Total Ticks: "+stopWatch.ElapsedTicks);
            Console.WriteLine("Ticks per MiliSecond: "+TimeSpan.TicksPerMillisecond);

            //Console.ReadKey();
        }
        static object _lock = new object();
        private static void AddOneMillion()
        {
            for (int i = 1; i <= 1000000; i++)
            {
                //Interlocked.Increment(ref total); //Better performance
                //lock (_lock)
                //{
                //    total++;
                //}

                bool lockTaken = false;
                Monitor.Enter(_lock, ref lockTaken);
                try{
                    total++;
                }
                finally
                {
                    if (lockTaken)
                    {
                        Monitor.Exit(_lock);
                    }
                }
            }
        }
       
    }