
1. A delegate is a type safe function pointer
2. To make the function reuseable.
3. To avoiding hard-coded logic.

namespace PracticeBasicCS
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Employee> employees = new List<Employee>()
            {
                new Employee(){Id = 1, Name="Mr. Kamal", Salary=45000, Experience=3},
                new Employee(){Id = 2, Name="Mr. John", Salary=51000, Experience=4},
                new Employee(){Id = 3, Name="Mr. Mark", Salary=35000, Experience=2},
                new Employee(){Id = 4, Name="Mr. Mary", Salary=65000, Experience=6},
                new Employee(){Id = 5, Name="Mr. Dev", Salary=49000, Experience=5},
            };

            SeniorChecker isSenior = new SeniorChecker(IsExperienced);

            Console.WriteLine("--------Employess who are experienced more than 5 years-------------");
            Employee.GetFilteredEmployee(employees, isSenior);

            //Calling delegate by lamba
            Console.WriteLine("\n--------Employess whom salary more than 50000----------");
            Employee.GetFilteredEmployee(employees, emp => emp.Salary > 50000);

            Console.WriteLine("\n--------Searching Mr. Kamal------------");
            Employee.GetFilteredEmployee(employees, emp => emp.Name =="Mr. Kamal");


            Console.ReadKey();
        }

        public static bool IsExperienced(Employee employee)
        {
            if (employee.Experience >= 5)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        
    }

    public delegate bool SeniorChecker(Employee employee);

    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Salary { get; set; }
        public int Experience { get; set; }

        public static void GetFilteredEmployee(List<Employee> employess, SeniorChecker seniorChecker)
        {
            foreach(Employee emp in employess)
            {
                if (seniorChecker(emp))
                {
                    Console.WriteLine($"Name:{emp.Name}Experience: {emp.Experience} Salary: {emp.Salary}");
                }
            }
        }
    }
    
}